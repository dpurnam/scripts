#!/bin/bash
# WakeMyPotata emergency RAID/system safe shutdown
# For battery-powered devices only

version="v2.1.3"
SERVICE_FILE="/etc/systemd/system/wmp.service"

# Use grep to find the line containing ExecStart and store it in a variable.
# The `cut` command ensures we only get the content after `ExecStart=`.
#exec_start_line=$(grep '^ExecStart=' "${SERVICE_FILE}" | cut -d'=' -f2)
exec_start_line=$(grep '^ExecStart=' "${SERVICE_FILE}")

# Function to get the threshold value, only if it exists.
if echo "${exec_start_line}" | grep -q -- --threshold; then
    threshold_feature=1
    get_threshold() {
        # This `awk` command finds `--threshold` and prints the next argument.
        #echo "${exec_start_line}" | awk -v RS=" " '/--threshold/{print (NR>1? p:""); p=0; next}{p=$1}END{print p}'
        threshold_value=$(echo "${exec_start_line}" | awk -F'--threshold ' '{print $2}' | awk '{print $1}')
        echo $threshold_value
    }
    
    # Function to set the threshold value.
    set_threshold() {
        local new_threshold="$1"
        local current_timeout="$(get_timeout)"
        # Default to 600 if not present
        [[ -z "$current_timeout" ]] && current_timeout=600
        sed -i "s|^ExecStart=.*|ExecStart=/usr/local/sbin/wmp-run --timeout $current_timeout --threshold $new_threshold|" "$SERVICE_FILE"
        systemctl daemon-reload
    }
else
    threshold_feature=0
fi

# Function to get the timeout value.
get_timeout() {
    # This `awk` command finds `--timeout` and prints the next argument.
    #echo "${exec_start_line}" | awk -v RS=" " '/--timeout/{print (NR>1? p:""); p=0; next}{p=$1}END{print p}'
    timeout_value=$(echo "${exec_start_line}" | awk -F'--timeout ' '{print $2}' | awk '{print $1}')
    echo $timeout_value
}

# Function to set the timeout value.
set_timeout() {
    local new_timeout="$1"
    if [[ $threshold_feature -eq 1 ]]; then
        local current_threshold="$(get_threshold)"
        # Default to 10 if not present
        [[ -z "$current_threshold" ]] && current_threshold=10
        sed -i "s|^ExecStart=.*|ExecStart=/usr/local/sbin/wmp-run --timeout $new_timeout --threshold $current_threshold|" "$SERVICE_FILE"
    else
        sed -i "s|^ExecStart=.*|ExecStart=/usr/local/sbin/wmp-run --timeout $new_timeout|" "$SERVICE_FILE"
    fi
    systemctl daemon-reload
}

if [[ "$1" == "help" ]]; then
    echo ""
    echo "  WakeMyPotata user commands:"
    echo ""
    echo "  sudo wmp help                                            Show this help message"
    echo "  sudo wmp version                                         Print the software version"
    echo "  sudo wmp status                                          Check the service status"
    echo "  sudo wmp log                                             View warning logs"
    if [[ $threshold_feature -eq 1 ]]; then
        echo "  sudo wmp battery                                         Show battery status"
        echo "  sudo wmp threshold                                       Show battery level threshold in %"
        echo "  sudo wmp threshold set <percent>                         Set battery level threshold in % (10-50)"
    fi
    echo "  sudo wmp timeout                                         Show current timeout value (seconds)"
    echo "  sudo wmp timeout set <seconds>                           Set new timeout value"
    echo "  sudo wmp run --timeout <seconds>                         Run a manual check (timeout is required)"
    echo "  sudo wmp stop                                            Stop the service"
    echo "  sudo wmp start                                           Start the service"
    echo "  sudo wmp uninstall                                       Uninstall the service"
    echo ""

elif [[ "$1" == "version" ]]; then
    echo "$version"

elif [[ "$1" == "status" ]]; then
    echo "WakeMyPotata status:"
    systemctl status wmp.service
    systemctl status wmp.timer
    echo "Timeout: $(get_timeout) seconds"

    if [[ $threshold_feature -eq 1 ]]; then
        echo "Threshold: $(get_threshold)%"
    fi

elif [[ "$1" == "log" ]]; then
    sudo journalctl -u wmp -p warning -r

elif [[ "$1" == "battery" && $threshold_feature -eq 1 ]]; then
    if ! command -v upower &>/dev/null; then
        echo "upower not available. Try: sudo apt-get install upower"
        exit 1
    fi
    BAT_PATH=$(upower -e 2>/dev/null | grep -m1 BAT || true)
    if [ -n "$BAT_PATH" ]; then
        upower -i "$BAT_PATH" | grep -E 'state|percentage|time to empty|time to full'
    fi

elif [[ "$1" == "threshold" && $threshold_feature -eq 1 ]]; then
    echo "Battery threshold: $(get_threshold)%"

elif [[ "$1" == "threshold" && "$2" == "set" && $threshold_feature -eq 1 ]]; then
    echo "Usage: sudo wmp threshold set <percent>"
    echo "       percent should be a number between 10 and 50"
    exit 1

elif [[ "$1" == "threshold" && "$2" == "set" && -n "$3" && $threshold_feature -eq 1 ]]; then
    if [[ ! "$3" =~ ^[0-9]+$ ]] || (( $3 < 10 || $3 > 50 )); then
        echo "Invalid input, please enter a positive integer (between 10 and 50)! Aborting..."
        exit 1
    fi
    set_threshold "$3"
    echo "Threshold updated successfully to $3%!"

elif [[ "$1" == "timeout" ]]; then
    echo "Timeout: $(get_timeout) seconds"

elif [[ "$1" == "timeout" && "$2" == "set" ]]; then
    echo "Usage: sudo wmp timeout set <seconds>"
    exit 1

elif [[ "$1" == "timeout" && "$2" == "set" && -n "$3" ]]; then
    if [[ ! "$3" =~ ^[0-9]+$ ]] || (( $3 < 1 )); then
        echo "Invalid input, please enter a positive integer (seconds)! Aborting..."
        exit 1
    fi
    set_timeout "$3"
    echo "Timeout updated successfully to $3 seconds!"

elif [[ "$1" == "run" ]]; then
    shift
    local_timeout=""
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --timeout)
                if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 1 )); then
                    local_timeout="$2"
                    shift 2
                else
                    echo "Invalid or missing --timeout value. Must be a positive integer."
                    exit 1
                fi
                ;;
            *)
                echo "Unknown argument: $1"
                echo "Usage: sudo wmp run --timeout <seconds>"
                exit 1
                ;;
        esac
    done
    if [[ -z "$local_timeout" ]]; then
        echo "Missing required argument: --timeout <seconds>"
        exit 1
    fi
    /usr/local/sbin/wmp-run --timeout "$local_timeout"

elif [[ "$1" == "stop" ]]; then
    systemctl stop wmp.timer
    systemctl disable wmp.timer
    systemctl daemon-reload

elif [[ "$1" == "start" ]]; then
    systemctl daemon-reload
    systemctl enable wmp.timer
    systemctl start wmp.timer

elif [[ "$1" == "uninstall" ]]; then
    echo "Removing WakeMyPotata..."
    systemctl stop wmp.timer
    systemctl disable wmp.timer
    rm -rf /etc/systemd/system/wmp.* /usr/local/sbin/wmp-run /usr/local/sbin/wmp
    systemctl daemon-reload
    echo "All clear."

else
    echo "Invalid command. Use 'sudo wmp help' to see available commands."
fi
